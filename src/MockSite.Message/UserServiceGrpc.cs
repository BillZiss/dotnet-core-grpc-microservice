// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MockSite.Message {
  public static partial class UserService
  {
    static readonly string __ServiceName = "Account.UserService";

    static readonly grpc::Marshaller<global::MockSite.Message.CreateUserMessage> __Marshaller_Account_CreateUserMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.CreateUserMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.BaseResponse> __Marshaller_Account_BaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.BaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.Empty> __Marshaller_Account_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.Users> __Marshaller_Account_Users = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.Users.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.QueryUserMessage> __Marshaller_Account_QueryUserMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.QueryUserMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.User> __Marshaller_Account_User = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.User.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MockSite.Message.UpdateUserMessage> __Marshaller_Account_UpdateUserMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MockSite.Message.UpdateUserMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::MockSite.Message.CreateUserMessage, global::MockSite.Message.BaseResponse> __Method_Create = new grpc::Method<global::MockSite.Message.CreateUserMessage, global::MockSite.Message.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Account_CreateUserMessage,
        __Marshaller_Account_BaseResponse);

    static readonly grpc::Method<global::MockSite.Message.Empty, global::MockSite.Message.Users> __Method_GetAll = new grpc::Method<global::MockSite.Message.Empty, global::MockSite.Message.Users>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAll",
        __Marshaller_Account_Empty,
        __Marshaller_Account_Users);

    static readonly grpc::Method<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.User> __Method_Get = new grpc::Method<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Account_QueryUserMessage,
        __Marshaller_Account_User);

    static readonly grpc::Method<global::MockSite.Message.UpdateUserMessage, global::MockSite.Message.BaseResponse> __Method_Update = new grpc::Method<global::MockSite.Message.UpdateUserMessage, global::MockSite.Message.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Account_UpdateUserMessage,
        __Marshaller_Account_BaseResponse);

    static readonly grpc::Method<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.BaseResponse> __Method_Delete = new grpc::Method<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Account_QueryUserMessage,
        __Marshaller_Account_BaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MockSite.Message.UserServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::MockSite.Message.BaseResponse> Create(global::MockSite.Message.CreateUserMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MockSite.Message.Users> GetAll(global::MockSite.Message.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MockSite.Message.User> Get(global::MockSite.Message.QueryUserMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MockSite.Message.BaseResponse> Update(global::MockSite.Message.UpdateUserMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MockSite.Message.BaseResponse> Delete(global::MockSite.Message.QueryUserMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::MockSite.Message.BaseResponse Create(global::MockSite.Message.CreateUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MockSite.Message.BaseResponse Create(global::MockSite.Message.CreateUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> CreateAsync(global::MockSite.Message.CreateUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> CreateAsync(global::MockSite.Message.CreateUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::MockSite.Message.Users GetAll(global::MockSite.Message.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MockSite.Message.Users GetAll(global::MockSite.Message.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAll, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.Users> GetAllAsync(global::MockSite.Message.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.Users> GetAllAsync(global::MockSite.Message.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAll, null, options, request);
      }
      public virtual global::MockSite.Message.User Get(global::MockSite.Message.QueryUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MockSite.Message.User Get(global::MockSite.Message.QueryUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.User> GetAsync(global::MockSite.Message.QueryUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.User> GetAsync(global::MockSite.Message.QueryUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::MockSite.Message.BaseResponse Update(global::MockSite.Message.UpdateUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MockSite.Message.BaseResponse Update(global::MockSite.Message.UpdateUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> UpdateAsync(global::MockSite.Message.UpdateUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> UpdateAsync(global::MockSite.Message.UpdateUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::MockSite.Message.BaseResponse Delete(global::MockSite.Message.QueryUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MockSite.Message.BaseResponse Delete(global::MockSite.Message.QueryUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> DeleteAsync(global::MockSite.Message.QueryUserMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MockSite.Message.BaseResponse> DeleteAsync(global::MockSite.Message.QueryUserMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_GetAll, serviceImpl.GetAll)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MockSite.Message.CreateUserMessage, global::MockSite.Message.BaseResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_GetAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MockSite.Message.Empty, global::MockSite.Message.Users>(serviceImpl.GetAll));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.User>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MockSite.Message.UpdateUserMessage, global::MockSite.Message.BaseResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MockSite.Message.QueryUserMessage, global::MockSite.Message.BaseResponse>(serviceImpl.Delete));
    }

  }
}
#endregion
