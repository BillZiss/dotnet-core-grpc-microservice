// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LocalizationMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MockSite.Message {

  /// <summary>Holder for reflection information generated from LocalizationMessage.proto</summary>
  public static partial class LocalizationMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for LocalizationMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalizationMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlMb2NhbGl6YXRpb25NZXNzYWdlLnByb3RvEgdBY2NvdW50IkYKCExhbmd1",
            "YWdlEhAKCExhbmdDb2RlGAEgASgJEhQKDERpc3BsYXlWYWx1ZRgCIAEoCRIS",
            "CgpEaXNwbGF5S2V5GAMgASgJIlIKC0xhbmd1YWdlU2V0Ei8KDExhbmd1YWdl",
            "U2V0cxgBIAMoCzIZLkFjY291bnQuUmVzcG9uc2VMYW5ndWFnZRISCgpEaXNw",
            "bGF5S2V5GAIgASgJIjAKCUxhbmd1YWdlcxIjCgVWYWx1ZRgBIAMoCzIULkFj",
            "Y291bnQuTGFuZ3VhZ2VTZXQiKgoUUXVlcnlMYW5ndWFnZU1lc3NhZ2USEgoK",
            "RGlzcGxheUtleRgBIAEoCSI6ChBSZXNwb25zZUxhbmd1YWdlEhAKCExhbmdD",
            "b2RlGAEgASgJEhQKDERpc3BsYXlWYWx1ZRgCIAEoCUITqgIQTW9ja1NpdGUu",
            "TWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MockSite.Message.Language), global::MockSite.Message.Language.Parser, new[]{ "LangCode", "DisplayValue", "DisplayKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MockSite.Message.LanguageSet), global::MockSite.Message.LanguageSet.Parser, new[]{ "LanguageSets", "DisplayKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MockSite.Message.Languages), global::MockSite.Message.Languages.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MockSite.Message.QueryLanguageMessage), global::MockSite.Message.QueryLanguageMessage.Parser, new[]{ "DisplayKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MockSite.Message.ResponseLanguage), global::MockSite.Message.ResponseLanguage.Parser, new[]{ "LangCode", "DisplayValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Language : pb::IMessage<Language> {
    private static readonly pb::MessageParser<Language> _parser = new pb::MessageParser<Language>(() => new Language());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Language> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MockSite.Message.LocalizationMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language(Language other) : this() {
      langCode_ = other.langCode_;
      displayValue_ = other.displayValue_;
      displayKey_ = other.displayKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language Clone() {
      return new Language(this);
    }

    /// <summary>Field number for the "LangCode" field.</summary>
    public const int LangCodeFieldNumber = 1;
    private string langCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangCode {
      get { return langCode_; }
      set {
        langCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayValue" field.</summary>
    public const int DisplayValueFieldNumber = 2;
    private string displayValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayValue {
      get { return displayValue_; }
      set {
        displayValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayKey" field.</summary>
    public const int DisplayKeyFieldNumber = 3;
    private string displayKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayKey {
      get { return displayKey_; }
      set {
        displayKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Language);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Language other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LangCode != other.LangCode) return false;
      if (DisplayValue != other.DisplayValue) return false;
      if (DisplayKey != other.DisplayKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LangCode.Length != 0) hash ^= LangCode.GetHashCode();
      if (DisplayValue.Length != 0) hash ^= DisplayValue.GetHashCode();
      if (DisplayKey.Length != 0) hash ^= DisplayKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LangCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LangCode);
      }
      if (DisplayValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayValue);
      }
      if (DisplayKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LangCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LangCode);
      }
      if (DisplayValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayValue);
      }
      if (DisplayKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Language other) {
      if (other == null) {
        return;
      }
      if (other.LangCode.Length != 0) {
        LangCode = other.LangCode;
      }
      if (other.DisplayValue.Length != 0) {
        DisplayValue = other.DisplayValue;
      }
      if (other.DisplayKey.Length != 0) {
        DisplayKey = other.DisplayKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LangCode = input.ReadString();
            break;
          }
          case 18: {
            DisplayValue = input.ReadString();
            break;
          }
          case 26: {
            DisplayKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LanguageSet : pb::IMessage<LanguageSet> {
    private static readonly pb::MessageParser<LanguageSet> _parser = new pb::MessageParser<LanguageSet>(() => new LanguageSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MockSite.Message.LocalizationMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSet(LanguageSet other) : this() {
      languageSets_ = other.languageSets_.Clone();
      displayKey_ = other.displayKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSet Clone() {
      return new LanguageSet(this);
    }

    /// <summary>Field number for the "LanguageSets" field.</summary>
    public const int LanguageSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MockSite.Message.ResponseLanguage> _repeated_languageSets_codec
        = pb::FieldCodec.ForMessage(10, global::MockSite.Message.ResponseLanguage.Parser);
    private readonly pbc::RepeatedField<global::MockSite.Message.ResponseLanguage> languageSets_ = new pbc::RepeatedField<global::MockSite.Message.ResponseLanguage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MockSite.Message.ResponseLanguage> LanguageSets {
      get { return languageSets_; }
    }

    /// <summary>Field number for the "DisplayKey" field.</summary>
    public const int DisplayKeyFieldNumber = 2;
    private string displayKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayKey {
      get { return displayKey_; }
      set {
        displayKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!languageSets_.Equals(other.languageSets_)) return false;
      if (DisplayKey != other.DisplayKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= languageSets_.GetHashCode();
      if (DisplayKey.Length != 0) hash ^= DisplayKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      languageSets_.WriteTo(output, _repeated_languageSets_codec);
      if (DisplayKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += languageSets_.CalculateSize(_repeated_languageSets_codec);
      if (DisplayKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageSet other) {
      if (other == null) {
        return;
      }
      languageSets_.Add(other.languageSets_);
      if (other.DisplayKey.Length != 0) {
        DisplayKey = other.DisplayKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            languageSets_.AddEntriesFrom(input, _repeated_languageSets_codec);
            break;
          }
          case 18: {
            DisplayKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Languages : pb::IMessage<Languages> {
    private static readonly pb::MessageParser<Languages> _parser = new pb::MessageParser<Languages>(() => new Languages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Languages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MockSite.Message.LocalizationMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Languages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Languages(Languages other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Languages Clone() {
      return new Languages(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MockSite.Message.LanguageSet> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::MockSite.Message.LanguageSet.Parser);
    private readonly pbc::RepeatedField<global::MockSite.Message.LanguageSet> value_ = new pbc::RepeatedField<global::MockSite.Message.LanguageSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MockSite.Message.LanguageSet> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Languages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Languages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Languages other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryLanguageMessage : pb::IMessage<QueryLanguageMessage> {
    private static readonly pb::MessageParser<QueryLanguageMessage> _parser = new pb::MessageParser<QueryLanguageMessage>(() => new QueryLanguageMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryLanguageMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MockSite.Message.LocalizationMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLanguageMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLanguageMessage(QueryLanguageMessage other) : this() {
      displayKey_ = other.displayKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryLanguageMessage Clone() {
      return new QueryLanguageMessage(this);
    }

    /// <summary>Field number for the "DisplayKey" field.</summary>
    public const int DisplayKeyFieldNumber = 1;
    private string displayKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayKey {
      get { return displayKey_; }
      set {
        displayKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryLanguageMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryLanguageMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayKey != other.DisplayKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayKey.Length != 0) hash ^= DisplayKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DisplayKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryLanguageMessage other) {
      if (other == null) {
        return;
      }
      if (other.DisplayKey.Length != 0) {
        DisplayKey = other.DisplayKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DisplayKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseLanguage : pb::IMessage<ResponseLanguage> {
    private static readonly pb::MessageParser<ResponseLanguage> _parser = new pb::MessageParser<ResponseLanguage>(() => new ResponseLanguage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseLanguage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MockSite.Message.LocalizationMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLanguage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLanguage(ResponseLanguage other) : this() {
      langCode_ = other.langCode_;
      displayValue_ = other.displayValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLanguage Clone() {
      return new ResponseLanguage(this);
    }

    /// <summary>Field number for the "LangCode" field.</summary>
    public const int LangCodeFieldNumber = 1;
    private string langCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangCode {
      get { return langCode_; }
      set {
        langCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayValue" field.</summary>
    public const int DisplayValueFieldNumber = 2;
    private string displayValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayValue {
      get { return displayValue_; }
      set {
        displayValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseLanguage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseLanguage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LangCode != other.LangCode) return false;
      if (DisplayValue != other.DisplayValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LangCode.Length != 0) hash ^= LangCode.GetHashCode();
      if (DisplayValue.Length != 0) hash ^= DisplayValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LangCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LangCode);
      }
      if (DisplayValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LangCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LangCode);
      }
      if (DisplayValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseLanguage other) {
      if (other == null) {
        return;
      }
      if (other.LangCode.Length != 0) {
        LangCode = other.LangCode;
      }
      if (other.DisplayValue.Length != 0) {
        DisplayValue = other.DisplayValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LangCode = input.ReadString();
            break;
          }
          case 18: {
            DisplayValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
